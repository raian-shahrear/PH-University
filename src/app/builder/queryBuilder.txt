  // search query
  const studentSearchableFields = ['email', 'name.firstName', 'presentAddress'];
  let searchTerm = ''
  if(query?.searchTerm){
    searchTerm = query.searchTerm as string;
  }
  const searchQuery = StudentModel.find({
    $or: studentSearchableFields.map(field => ({
      [field]: {$regex: searchTerm, $options: 'i'}
    }))
  });

  // filter query
  const queryObj = {...query};
  const excludingFields = ['searchTerm', 'sort', 'limit', 'page', 'fields'];
  excludingFields.forEach(elm => delete queryObj[elm]);
  const filterQuery = searchQuery.find(queryObj);

  // sort query
  let sort = '-createdAt'
  if(query.sort){
    sort = query.sort as string;
  }
  const sortQuery = filterQuery.sort(sort);

  // limit query
  let limit = 10;
  if(query.limit){
    limit = Number(query.limit);
  }
  const limitQuery = sortQuery.limit(limit);

  // paginate query
  let page = 1;
  let skip = 0;
  if(query.page){
    page = Number(query.page);
    skip = (page-1)*limit;
  }
  const paginateQuery = limitQuery.skip(skip);

  // field limiting query
  let fields = '-__v';
  if(query.fields){
    fields = (query.fields as string).split(',').join(' ');
  }
  const fieldLimitingQuery = paginateQuery.select(fields);

  const result = await fieldLimitingQuery.find()
    .populate('admissionSemester')
    .populate({
      path: 'academicDepartment',
      populate: {
        path: 'academicFaculty',
      },
    });
  return result;